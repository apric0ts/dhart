using HumanFactors.Exceptions;
using HumanFactors.NativeUtils;
using HumanFactors.NativeUtils.CommonNativeArrays;
using HumanFactors.SpatialStructures;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;

/*! 
    \brief Calculate the shortest path between points in a Graph.

    \see ShortestPath for a list of pathfinding functions.
    \see Path for information on the fundamental path datatype. 

    \see SpatialStructures.Graph for information about the graph itself
    \see GraphGenerator to automatically generate a graph of accessible space on a mesh.

*/
namespace HumanFactors.Pathfinding
{

    /*!
        \brief Functions for finding the shortest path between two nodes in a graph.

        \remarks
        The shortest path functions will use Dijkstra's algorithm to find the shortest path between
        one or more nodes in a Graph. Since the graph can hold multiple costs for each contained edge,
        the type of cost used in this calculation can be specified for each function. This allows for
        paths to be generated using costs generated by the CostAlgorithms in SpatialStructures such as
        cross slope, or energy expenditure.

        \see ShortestPath for generating a single path between two nodes.
        \see DijkstraShortestPath for generating multiple paths at once. 
        \see SpatialStructures.Graph for more information on how it stores multiple costs.
    */
    public static class ShortestPath{

        /*!
            \brief Perform Dijkstra's shortest path algorithm to find a path between two nodes.
            
            \param graph The graph to conduct the search on.
            \param start_id The ID of the node to start at.
            \param end_id The ID of the node to find a path to. 
            \param cost_type The type of cost to use for generating the path. If left blank, will use
            the cost that the graph was created with. In the case of the graph generator, the default
            cost is distance. 

            \returns The shortest path from start_node to end_node or null if no path could be found.
            
            \pre 1) `start_id` and `end_id` must be the X,Y,Z position of nodes that already exist in `graph`.
            \pre 2) If `cost_type` is not left as the default, then it must be the name of a valid cost already
            defined in `graph`.

            \throws KeyNotFoundException `cost_type` wasn't left as blank, and didn't
            refer to the name of any cost that already exists in the graph.

            \see DijkstraShortestPathMulti for efficently generating multiple paths in parallel.
        */
        public static Path DijkstraShortestPath(Graph graph, int start_id, int end_id, string cost_type = "")
        {
            CVectorAndData cvad = NativeMethods.C_CreatePath(graph.Pointer, start_id, end_id, cost_type);
            if (cvad.size <= 0)
                return null;
            else
                return new Path(cvad);
        }

        /*!
            \brief Perform Dijkstra's shortest path algorithm to find a path between two nodes.
            
            \param graph The graph to conduct the search on.
            \param start_node The X,Y,Z of a node in the graph node to start at.
            \param end_node The X,Y,Z of a node in the graph node to end at.
            \param cost_type The type of cost to use for generating the path. If left blank, will use
            the cost that the graph was created with. In the case of the graph generator, the default
            cost is distance. 
            
            \returns The shortest path from start_node to end_node or null if no path could be found.
            
            \pre 1) `start_node` and `end_node` must be the X,Y,Z position of nodes that already exist in `graph`.
            \pre 2) If `cost_type` is not left as the default, then it must be the name of a valid cost already
            defined in `graph`.

            \remarks Gets the start id and end of both nodes, then calls the ID overload. 
            
            \throws KeyNotFoundException `cost_type` wasn't left as blank, and didn't
            refer to the name of any cost that already exists in the graph.


            \see DijkstraShortestPathMulti for efficently generating multiple paths in parallel.
        */
        public static Path DijkstraShortestPath(Graph graph, Vector3D start_node, Vector3D end_node, string cost_type = "")
        {
            int parent_id = graph.GetNodeID(start_node);
            int child_id = graph.GetNodeID(end_node);

            return DijkstraShortestPath(graph, parent_id, child_id, cost_type);
        }

        /*! 
            \brief Find the shortest paths between each pair of start_id and end_id in order. 
            
            \param graph The graph to generate paths in.
            \param start_ids Ids for the start points to generate paths from. 
            \param end_ids Ids for the end points to generate paths to
            \param cost_type The type of cost to use for generating the path. If left blank, will use
            the cost that the graph was created with. In the case of the graph generator, the default
            cost is distance. 

            \returns
            A list of paths in order from start_ids to end_ids. If a path could not be generated by a set of points,
            then the path at that location will be null. 
            
            \pre 1) The length of start_ids must match the length of end_ids.
            \pre 2) Every ID in `start_ids` and `end_ids` must be the ID of some node in `graph`. 
            \pre 3) If `cost_type` is not left as the default, then it must be the name of a valid cost already
            defined in `graph`.

            \details Uses all available cores for parallel calculation. 

            \pre The length of start_ids must match the length of end_ids.

            \throws System.ArgumentException Length of start_ids didn't equal length of end_ids
            \throws KeyNotFoundException `cost_type` wasn't left as blank, and didn't
            refer to the name of any cost that already exists in the graph.
        */
        public static Path[] DijkstraShortestPathMulti(
            Graph graph, 
            int[] start_ids,
            int[] end_ids,
            string cost_type = ""
        ){
            if (start_ids.Length != end_ids.Length) 
                throw new ArgumentException("Length of start_ids didn't equal length of end_ids");

            CVectorAndData[] cvads = NativeMethods.C_CreatePaths(graph.Pointer, start_ids, end_ids, cost_type);
            Path[] paths = new Path[start_ids.Length];
            for(int i = 0; i < cvads.Length; i++)
            {
                if (cvads[i].IsValid())
                    paths[i] = new Path(cvads[i]);
                else
                    paths[i] = null;
            }

            return paths;
        }

        /*! 
            \brief Find the shortest paths between each pair of start_id and end_id in order. 
            
            \param graph The graph to generate paths in.
            \param start_nodes Locations of the start points to generate paths from.
            \param end_nodes Locations of the end nodes to generate paths to.
            \param cost_type The type of cost to use for generating the path. If left blank, will use
            the cost that the graph was created with. In the case of the graph generator, the default
            cost is distance. 

            \returns
            A list of paths in order from `start_ids` to `end_ids`. If a path could not be generated by a set of points,
            then the path at that location will be null. 

            \details Determines the IDs of nodes, then calls the other overload. Uses all available cores for parallel calculation. 

            \pre 1) The length of `start_ids` must match the length of `end_ids`.
            \pre 2) Each node in `start_nodes` and end_nodes must contain the x,y,z position of an existing node in `graph`
            \pre 3) If `cost_type` is not left as the default, then it must be the name of a valid cost already
            defined in `graph`.

            \throws System.ArgumentException Length of `start_ids` didn't equal length of `end_ids`
            \throws KeyNotFoundException `cost_type` wasn't left as blank, and didn't
                     refer to the name of any cost that already exists in `graph`.

        */
        public static Path[] DijkstraShortestPathMulti(
            Graph graph,
            IEnumerable<Vector3D> start_nodes,
            IEnumerable<Vector3D> end_nodes,
            string cost_type = ""
        ) {
            if (start_nodes.Count() != end_nodes.Count())
                throw new ArgumentException("Length of start_nodes didn't equal length of end_nodes");

            int size = start_nodes.Count();
            int[] start_ids = new int[size];
            int[] end_ids = new int[size];

            int i = 0;
            foreach (var start_end in start_nodes.Zip(end_nodes, (start, end) => new Tuple<Vector3D, Vector3D>(start, end)))
            {
                start_ids[i] = graph.GetNodeID(start_end.Item1);
                end_ids[i] = graph.GetNodeID(start_end.Item2);
                i++;
            }

            return DijkstraShortestPathMulti(graph, start_ids, end_ids, cost_type);
        }


        /*! 
            \brief Generate a path from every node in the graph to every other node in a graph.
        
            \param g The graph to generate paths in. 
            \param cost_type Type of cost to use for path generation. If left blank will use the
                              default cost of the graph
             
            \returns 
            An array of paths with a length equal to the number of nodes in `g` squared. Paths will
            be returned in order starting with all paths from node 0, then all paths from node 1, etc.
            If a path could not be generated between a set of nodes, then path at that index will be null.

            \pre If `cost_type` is not left as the default, then it must be the name of a valid cost already
            defined in `graph`.

            \throws KeyNotFoundException `cost_type` wasn't left as blank, and didn't
                     refer to the name of any cost that already exists in `graph`.
        */
        public static Path[] DijkstraAllToAll(Graph g, string cost_type = "")
        {
            // Generate paths in native code
            var cvads = NativeMethods.C_AllToAllPaths(g.Pointer, g.NumNodes(), cost_type);
            
            // Create an array of paths and only copy over the paths that have a length
            // greater than one.
            Path[] paths = new Path[cvads.Length];
            for (int i = 0; i < cvads.Length; i++)
            {
                
                // If the validity check fails, then no path 
                // could be found between these nodes and we must
                // set the path in to null in our output
                if (cvads[i].IsValid())
                    paths[i] = new Path(cvads[i]);
                else
                    paths[i] = null;
            }
            return paths;
        }
    }
}
<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="class_human_factors_1_1_spatial_structures_1_1_graph" kind="class" language="C#" prot="public">
    <compoundname>HumanFactors::SpatialStructures::Graph</compoundname>
    <basecompoundref refid="class_human_factors_1_1_native_utils_1_1_native_object" prot="public" virt="non-virtual">HumanFactors.NativeUtils.NativeObject</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a0e139b5c04daaa9e4bd3bf9cb3ee9722" prot="private" static="no" mutable="no">
        <type><ref refid="struct_human_factors_1_1_spatial_structures_1_1_c_s_r_info" kindref="compound">CSRInfo</ref></type>
        <definition>CSRInfo HumanFactors.SpatialStructures.Graph.CSRPointers</definition>
        <argsstring></argsstring>
        <name>CSRPointers</name>
        <briefdescription>
<para>This graph&apos;s CSR pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="104" column="25" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="104" bodyend="-1"/>
        <referencedby refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" compoundref="_graph_8cs" startline="231" endline="235">HumanFactors.SpatialStructures.Graph.CompressToCSR</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-func">
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1aa613f3162fe49e35e155cd2418a0fa46" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HumanFactors.SpatialStructures.Graph.Graph</definition>
        <argsstring>(IntPtr GraphPtr)</argsstring>
        <name>Graph</name>
        <param>
          <type>IntPtr</type>
          <declname>GraphPtr</declname>
        </param>
        <briefdescription>
<para>Wrap a graph that already exists in unmanaged memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>GraphPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the grpah in unmanaged memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="108" column="18" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="108" bodyend="108"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HumanFactors.SpatialStructures.Graph.Graph</definition>
        <argsstring>()</argsstring>
        <name>Graph</name>
        <briefdescription>
<para>Construct a new empty graph in unmanaged memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="111" column="16" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a24d42bc60412118b8eab54d137cabf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.SpatialStructures.Graph.AddEdge</definition>
        <argsstring>(Vector3D parent, Vector3D child, float cost, string cost_type=&quot;&quot;)</argsstring>
        <name>AddEdge</name>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>child</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new edge between parent and child with cost. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The X,Y,Z location for the parent node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>x,y,z location for the child </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost</parametername>
</parameternamelist>
<parameterdescription>
<para>cost for parent to child </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to add the edge to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This overload is meant for debugging. There are many issues that can occur with adding integers to the graph that don&apos;t already have nodes assigned. Instead use the overload of this function deals with vector 3.</para>
</simplesect>
<simplesect kind="pre"><para>1) If adding edges to a new cost type, the graph has been compressed by calling <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">CompressToCSR()</ref>. </para>
</simplesect>
<simplesect kind="pre"><para>2) If adding a cost to a type that isn&apos;t the default cost type, the edge must already exist in the default cost type. </para>
</simplesect>
<simplesect kind="pre"><para>3) If the graph has already been compressed and alternate costs exist, then both <computeroutput>parent</computeroutput> and <computeroutput>child</computeroutput> already exist in the graph.</para>
</simplesect>
<simplesect kind="post"><para>1) If the ID of either parent or child does not exist in the graph then New IDs will be assigned to them. </para>
</simplesect>
<simplesect kind="post"><para>2) Existing representations of the this graph&apos;s CSR will be invalidated. </para>
</simplesect>
<simplesect kind="post"><para>3) If <computeroutput>cost_type</computeroutput> is not blank, and does not refer to the default cost type or any other cost that already exists in the graph, a new cost type will be created.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>LogicError</parametername>
</parameternamelist>
<parameterdescription>
<para>tried to add an alternate cost to the graph before it was compressed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InvalidCostOperation</parametername>
</parameternamelist>
<parameterdescription>
<para>Tried to add an alternate cost that doesn&apos;t exist in the graph&apos;s default cost type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>1) If an edge between parent and child already exists, this will overwrite that edge. </para>
</simplesect>
<simplesect kind="warning"><para>2) Calling this function will invalidate any existing CSRPtrs returned from the graph. Make sure to call CompressToCSR again continuing to access it.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>Graph,<sp/>add<sp/>an<sp/>edge<sp/>then<sp/>compress<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>G<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.AddEdge(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>2),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>1),<sp/>39);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.CompressToCSR();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>cost<sp/>form<sp/>the<sp/>edge<sp/>we<sp/>just<sp/>added<sp/>to<sp/>ensure<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cost_from_graph<sp/>=<sp/>G.GetCost(0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>retrieved<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(cost_from_graph);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>39</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="158" column="21"/>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a4103f286b08f3a7df95d22349d9db7ab" compoundref="overall__examples_8cs" startline="230" endline="302">Humanfctors.Examples.OverallExamples.GenerateAllToAll</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1ac1b76e93ead52d3375910a36155afd9e" compoundref="overall__examples_8cs" startline="305" endline="323">Humanfctors.Examples.OverallExamples.GetEdgeCostExample</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1ad4effbecd5ea2998b87425bd52e33f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.SpatialStructures.Graph.AddEdge</definition>
        <argsstring>(int parent_id, int child_id, float cost, string cost_type=&quot;&quot;)</argsstring>
        <name>AddEdge</name>
        <param>
          <type>int</type>
          <declname>parent_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>child_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new edge between parent and child with cost. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the parent node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the child node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost</parametername>
</parameternamelist>
<parameterdescription>
<para>cost from parent to child. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to add this edge to. If left blank will add the edge to the graph&apos;s default cost type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>1) If adding edges to a new cost type, the graph must first be compressed by calling <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">CompressToCSR()</ref> </para>
</simplesect>
<simplesect kind="pre"><para>2) If adding a cost to a type that isn&apos;t the default cost type, the edge must already exist in the default cost type. </para>
</simplesect>
<simplesect kind="pre"><para>3) If the graph has already been compressed and alternate costs exist, then both <computeroutput>parent</computeroutput> and <computeroutput>child</computeroutput> already exist in the graph.</para>
</simplesect>
<simplesect kind="post"><para>1) If the ID of either parent or child does not exist in the graph then New IDs will be assigned to them. </para>
</simplesect>
<simplesect kind="post"><para>2) Existing representations of the this graph&apos;s CSR will be invalidated. </para>
</simplesect>
<simplesect kind="post"><para>3) If <computeroutput>cost_type</computeroutput> is not blank, and does not refer to the default cost type or any other cost that already exists in the graph, a new cost type will be created.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>LogicError</parametername>
</parameternamelist>
<parameterdescription>
<para>tried to add an alternate cost to the graph before it was compressed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InvalidCostOperation</parametername>
</parameternamelist>
<parameterdescription>
<para>Tried to add an alternate cost that doesn&apos;t exist in the graph&apos;s default cost type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>1) If an edge between parent and child already exists, this will overwrite that edge. </para>
</simplesect>
<simplesect kind="warning"><para>2) Calling this function will invalidate any existing CSRPtrs returned from the graph. Make sure to call CompressToCSR again continuing to access it.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graph,<sp/>add<sp/>an<sp/>edge<sp/>then<sp/>compress<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>G<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.AddEdge(0,<sp/>1,<sp/>39);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.CompressToCSR();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>this<sp/>cost<sp/>from<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cost_from_graph<sp/>=<sp/>G.GetCost(0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>retrieved<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(cost_from_graph);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>39</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="199" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a6b2aeaa562da06bec0d23aaabb2ba74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_node_list" kindref="compound">NodeList</ref></type>
        <definition>NodeList HumanFactors.SpatialStructures.Graph.getNodes</definition>
        <argsstring>()</argsstring>
        <name>getNodes</name>
        <briefdescription>
<para>Get an array containing the graph&apos;s current nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An array of the graph&apos;s current nodes ordered by ID.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>G<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>an<sp/>edge<sp/>between<sp/>two<sp/>nodes.<sp/>This<sp/>will<sp/>effectively<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nodes<sp/>to<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.AddEdge(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>2),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>1),<sp/>39);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>nodes<sp/>by<sp/>calling<sp/>G.getNodes();</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>nodes<sp/>=<sp/>G.getNodes();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(nodes);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>[(0, 0, 2), (0, 0, 1)]</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="209" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_human_factors_1_1_spatial_structures_1_1_c_s_r_info" kindref="compound">CSRInfo</ref></type>
        <definition>CSRInfo HumanFactors.SpatialStructures.Graph.CompressToCSR</definition>
        <argsstring>(string cost_type=&quot;&quot;)</argsstring>
        <name>CompressToCSR</name>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Compress the graph into a CSR representation, and get pointers to it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Change the type of cost that&apos;s carried in the CSR&apos;s values array. If left blank, will use the graph&apos;s default cost type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>The CSR pointers can be mapped to after retrieved from C++ using spans, or can be copied out of managed memory.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> is not blank, the name of the graph&apos;s default cost type, or the name of any already defined cost type in the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>CSRPtrs for more info on the CSR type and how to access it.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>G<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.AddEdge(1,<sp/>2,<sp/>39);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>the<sp/>graph<sp/>to<sp/>a<sp/>CSR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>default_ptrs<sp/>=<sp/>G.CompressToCSR();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>CSR</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.Write(default_ptrs);</highlight></codeline>
</programlisting><computeroutput>(nnz: 1, rows: 3, cols: 3)</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="231" column="24" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="231" bodyend="235"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1a6ed59ccf6ca4b02b79b12b724afddce9" compoundref="_spatial_structures_native_8cs" startline="115" endline="141">HumanFactors.SpatialStructures.NativeMethods.C_GetCSRPointers</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a0e139b5c04daaa9e4bd3bf9cb3ee9722" compoundref="_graph_8cs" startline="104">HumanFactors.SpatialStructures.Graph.CSRPointers</references>
        <referencedby refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a45a2d5b16092f8389210dc47f722a539" compoundref="_graph_8cs" startline="272" endline="281">HumanFactors.SpatialStructures.Graph.AggregateEdgeCosts</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a4103f286b08f3a7df95d22349d9db7ab" compoundref="overall__examples_8cs" startline="230" endline="302">Humanfctors.Examples.OverallExamples.GenerateAllToAll</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a17a9e1bbc4b6fedf48ded818e2b30bb8" compoundref="overall__examples_8cs" startline="26" endline="68">Humanfctors.Examples.OverallExamples.GenerateExampleGraph</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1ac1b76e93ead52d3375910a36155afd9e" compoundref="overall__examples_8cs" startline="305" endline="323">Humanfctors.Examples.OverallExamples.GetEdgeCostExample</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a45a2d5b16092f8389210dc47f722a539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_native_utils_1_1_common_native_arrays_1_1_managed_float_array" kindref="compound">ManagedFloatArray</ref></type>
        <definition>ManagedFloatArray HumanFactors.SpatialStructures.Graph.AggregateEdgeCosts</definition>
        <argsstring>(GraphEdgeAggregation type, bool directed=true, string cost_type=&quot;&quot;)</argsstring>
        <name>AggregateEdgeCosts</name>
        <param>
          <type><ref refid="namespace_human_factors_1_1_spatial_structures_1abd405fa41da0f9a771d547aa47b6e1a0" kindref="member">GraphEdgeAggregation</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>directed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Summarize the edgecosts of every node in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of aggregation method to use.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the graph is directed. If set to true then each nodes&apos;s score will only consider incomning edges. Otherwise, each node&apos;s score will consider both outgoing and incoming edges.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to use for aggregating the edges.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of scores, in which each element corresponds to a node in the graph sorted by ID.</para>
</simplesect>
<simplesect kind="pre"><para>If not left blank, cost_type must point to a valid cost in the graph.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para>Cost specified didn&apos;t match the default cost, or any other cost type defined in the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This will compress the graph if it is not compressed already. If any edges were added between lat call to CompressToCSR and now, then any active CSRPtrs will be invalidated.</para>
</simplesect>
<simplesect kind="remark"><para>The order of the scores returned bythis function match the order of the scores returned from <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a6b2aeaa562da06bec0d23aaabb2ba74d" kindref="member">Graph.getNodes</ref>. This can be especially useful for summarizing the results of a <ref refid="namespace_human_factors_1_1_visibility_graph" kindref="compound">VisibilityGraph</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>graph<sp/>and<sp/>add<sp/>some<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>2,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(1,<sp/>2,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>the<sp/>graph<sp/>before<sp/>using<sp/>it<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.CompressToCSR();</highlight></codeline>
</programlisting> <programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>scores<sp/>=<sp/>g.AggregateEdgeCosts(<ref refid="namespace_human_factors_1_1_spatial_structures_1abd405fa41da0f9a771d547aa47b6e1a0" kindref="member">GraphEdgeAggregation</ref>.SUM);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>score_arr<sp/>=<sp/>scores.array;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(scores);</highlight></codeline>
</programlisting><computeroutput>[150, 20, 0]</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="272" column="34" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="272" bodyend="281"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1a30608108f5adb70a2e28167a41921770" compoundref="_spatial_structures_native_8cs" startline="160" endline="185">HumanFactors.SpatialStructures.NativeMethods.C_AggregateEdgeCosts</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" compoundref="_graph_8cs" startline="231" endline="235">HumanFactors.SpatialStructures.Graph.CompressToCSR</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a1a40fc2bab18a5adf42fb7a49ca6ddb9">HumanFactors.SpatialStructures.Graph.NumNodes</references>
        <references refid="struct_human_factors_1_1_native_utils_1_1_c_vector_and_data_1a8bcdb7b4516a15f5b905ebcd33a55e6c" compoundref="_native_utils_8cs" startline="38">HumanFactors.NativeUtils.CVectorAndData.size</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1abde89644defe692bffea19e3c3aebf8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float HumanFactors.SpatialStructures.Graph.GetCost</definition>
        <argsstring>(int parent, int child, string cost_type=&quot;&quot;)</argsstring>
        <name>GetCost</name>
        <param>
          <type>int</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>child</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Get the cost of traversing between <computeroutput>parent</computeroutput> and <computeroutput>child</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_human_factors_1_1_spatial_structures_1_1_node" kindref="compound">Node</ref> that&apos;s being traversed from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_human_factors_1_1_spatial_structures_1_1_node" kindref="compound">Node</ref> that&apos;s being traversed to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The cost type to retrieve. If blank, the graph&apos;s default cost will be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cost of traversing from <computeroutput>parent</computeroutput> to <computeroutput>child</computeroutput>.</para>
</simplesect>
<simplesect kind="pre"><para>1) cost_type must be the name of a cost that already exists in the graph, or blank. </para>
</simplesect>
<simplesect kind="pre"><para>2) The graph must first have been compressed using <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">Graph.CompressToCSR()</ref>.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>LogicError</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph wasn&apos;t compressed before calling this function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyNotFoundExeption</parametername>
</parameternamelist>
<parameterdescription>
<para>The cost_type specified was not the default cost, blank, or the name of any cost that currently belongs to the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is not a high performance function, since each index into the CSR requires an indexing operation. If multiple values are required, it is suggested to iterate through the pointers from <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">Graph.CompressToCSR()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><computeroutput>100</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="311" column="22" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="311" bodyend="314"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1a182becf6bcb9045968fd8c04f12e64f8" compoundref="_spatial_structures_native_8cs" startline="187" endline="205">HumanFactors.SpatialStructures.NativeMethods.C_GetEdgeCost</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1ac1b76e93ead52d3375910a36155afd9e" compoundref="overall__examples_8cs" startline="305" endline="323">Humanfctors.Examples.OverallExamples.GetEdgeCostExample</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1abe9106fd9584269e1291702aa401f6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HumanFactors.SpatialStructures.Graph.GetNodeID</definition>
        <argsstring>(Vector3D node)</argsstring>
        <name>GetNodeID</name>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Gets the ID of a node in the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The X,Y,Z position of a node to get the ID for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ID of the node, or -1 if the node isn&apos;t in the graph.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3D<sp/>node0<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3D<sp/>node1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>edge<sp/>between<sp/>them<sp/>to<sp/>add<sp/>them<sp/>to<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(node0,<sp/>node1,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>their<sp/>IDs<sp/>from<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_0_id<sp/>=<sp/>g.GetNodeID(node0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_1_id<sp/>=<sp/>g.GetNodeID(node1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(node_0_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(node_1_id);</highlight></codeline>
</programlisting><computeroutput>0</computeroutput><linebreak/>
<computeroutput>1</computeroutput><linebreak/>
<programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>third<sp/>node<sp/>and<sp/>try<sp/>to<sp/>get<sp/>it&apos;s<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3D<sp/>node2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3D(0,<sp/>0,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_2_id<sp/>=<sp/>g.GetNodeID(node2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(node_2_id);</highlight></codeline>
</programlisting><computeroutput>-1</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="331" column="20"/>
        <referencedby refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a394c96543ad621b2e5d98554153d74b4" compoundref="_shortest_path_8cs" startline="117" endline="123">HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPath</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a4092cfc4260762e5b18127e3dbbe770e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.SpatialStructures.Graph.AddNodeAttribute</definition>
        <argsstring>(int id, string attribute, string score)</argsstring>
        <name>AddNodeAttribute</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>string</type>
          <declname>score</declname>
        </param>
        <briefdescription>
<para>Define a node attribute for the node at id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the node that will receive attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the attribute to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score</parametername>
</parameternamelist>
<parameterdescription>
<para>The score for <computeroutput>attribute</computeroutput> to store for this node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>graph<sp/>and<sp/>add<sp/>two<sp/>edges<sp/>to<sp/>create<sp/>nodes</highlight></codeline>
<codeline><highlight class="normal">Graph<sp/>g<sp/>=<sp/>new<sp/>Graph();</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>1,<sp/>150);</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>2,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>3,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>node<sp/>attributes<sp/>to<sp/>the<sp/>graph<sp/>for<sp/>the<sp/>nodes</highlight></codeline>
<codeline><highlight class="normal">//<sp/>we<sp/>just<sp/>created</highlight></codeline>
<codeline><highlight class="normal">g.AddNodeAttribute(2,<sp/>&quot;Attr&quot;,<sp/>&quot;200&quot;);</highlight></codeline>
<codeline><highlight class="normal">g.AddNodeAttribute(1,<sp/>&quot;Attr&quot;,<sp/>&quot;100&quot;);</highlight></codeline>
<codeline><highlight class="normal">g.AddNodeAttribute(0,<sp/>&quot;Attr&quot;,<sp/>&quot;0&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>scores<sp/>for<sp/>this<sp/>attribute<sp/>from<sp/>the<sp/>graph</highlight></codeline>
<codeline><highlight class="normal">var<sp/>attr<sp/>=<sp/>g.GetNodeAttributes(&quot;Attr&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Print<sp/>results</highlight></codeline>
<codeline><highlight class="normal">foreach<sp/>(var<sp/>attribute<sp/>in<sp/>attr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Debug.WriteLine(attribute);</highlight></codeline>
</programlisting> <computeroutput>&gt;&gt;&gt; 0</computeroutput><linebreak/>
<computeroutput>&gt;&gt;&gt; 100</computeroutput><linebreak/>
<computeroutput>&gt;&gt;&gt; 200</computeroutput><linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="377" column="21" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a4cf45189fef35fbd24aa74a9f51adafc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.SpatialStructures.Graph.AddNodeAttribute</definition>
        <argsstring>(string attribute, IEnumerable&lt; int &gt; ids, IEnumerable&lt; string &gt; scores)</argsstring>
        <name>AddNodeAttribute</name>
        <param>
          <type>string</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>IEnumerable&lt; int &gt;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>IEnumerable&lt; string &gt;</type>
          <declname>scores</declname>
        </param>
        <briefdescription>
<para>Add attribute to all node in ids, with their respective score in scores. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>IDs of nodes to assign scores to for <computeroutput>attribute</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the attribute to assigns cores to for each node in <computeroutput>ids</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scores</parametername>
</parameternamelist>
<parameterdescription>
<para>Ordered ids of scores to add to the node at the id in <computeroutput>ids</computeroutput> at the same index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>the length of <computeroutput>ids</computeroutput> and <computeroutput>scores</computeroutput> must match</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>graph<sp/>and<sp/>add<sp/>two<sp/>edges<sp/>to<sp/>create<sp/>nodes</highlight></codeline>
<codeline><highlight class="normal">Graph<sp/>g<sp/>=<sp/>new<sp/>Graph();</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>1,<sp/>150);</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>2,<sp/>100);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>arrays<sp/>for<sp/>ids<sp/>and<sp/>scores</highlight></codeline>
<codeline><highlight class="normal">int[]<sp/>ids<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline><highlight class="normal">string[]<sp/>scores<sp/>=<sp/>{<sp/>&quot;0&quot;,<sp/>&quot;100&quot;,<sp/>&quot;200&quot;<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>them<sp/>to<sp/>the<sp/>graph</highlight></codeline>
<codeline><highlight class="normal">g.AddNodeAttribute(&quot;Attr&quot;,<sp/>ids,<sp/>scores);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>scores<sp/>for<sp/>this<sp/>attribute<sp/>from<sp/>the<sp/>graph</highlight></codeline>
<codeline><highlight class="normal">var<sp/>attr<sp/>=<sp/>g.GetNodeAttributes(&quot;Attr&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">foreach<sp/>(var<sp/>attribute<sp/>in<sp/>attr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Debug.WriteLine(attribute);</highlight></codeline>
</programlisting></para>
</simplesect>
<computeroutput>&gt;&gt;&gt; 0</computeroutput><linebreak/>
<computeroutput>&gt;&gt;&gt; 100</computeroutput><linebreak/>
<computeroutput>&gt;&gt;&gt; 200</computeroutput><linebreak/>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="417" column="21" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="417" bodyend="432"/>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a78c22c3af8aea1a7b873a61fcc8aa935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string[]</type>
        <definition>string [] HumanFactors.SpatialStructures.Graph.GetNodeAttributes</definition>
        <argsstring>(string attribute)</argsstring>
        <name>GetNodeAttributes</name>
        <param>
          <type>string</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
<para>Get the score of every node for a given attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique name of the attribute type to get from the graph fopr every node</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If an attribute with the name of <computeroutput>attribute</computeroutput>, type was found in the graph, then an array of scores for each node is returned in order of ID. For example, the score of the node with id 10 would be stored at index 10, id 12 stored at index 12, etc. Nodes without scores for <computeroutput>attribute</computeroutput> will have empty strings at their indexes.</para>
</simplesect>
<simplesect kind="return"><para>If <computeroutput>attribute</computeroutput> didn&apos;t exist in the graph, then an empty array of strings will be returned.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>graph<sp/>and<sp/>add<sp/>some<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>2,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(1,<sp/>2,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>the<sp/>graph<sp/>before<sp/>using<sp/>it<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.CompressToCSR();</highlight></codeline>
</programlisting><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>node<sp/>attributes<sp/>to<sp/>the<sp/>graph<sp/>for<sp/>the<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddNodeAttribute(2,<sp/></highlight><highlight class="stringliteral">&quot;Attr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;200&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddNodeAttribute(1,<sp/></highlight><highlight class="stringliteral">&quot;Attr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;100&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddNodeAttribute(0,<sp/></highlight><highlight class="stringliteral">&quot;Attr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>scores<sp/>for<sp/>this<sp/>attribute<sp/>from<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>attr<sp/>=<sp/>g.GetNodeAttributes(</highlight><highlight class="stringliteral">&quot;Attr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>score<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>attr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.Write(score<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>0, 100, 200,</computeroutput> <programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>another<sp/>node<sp/>to<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>4,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>attributes<sp/>again<sp/>to<sp/>update<sp/>our<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr<sp/>=<sp/>g.GetNodeAttributes(</highlight><highlight class="stringliteral">&quot;Attr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>all<sp/>results.<sp/>Note<sp/>how<sp/>4<sp/>is<sp/>the<sp/>empty<sp/>string<sp/>since<sp/>it<sp/>was<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigned<sp/>a<sp/>score<sp/>for<sp/>ATTR<sp/>since<sp/>it<sp/>was<sp/>added<sp/>to<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>score<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>attr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.Write(score<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>0, 100, 200, ,</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="456" column="23" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="456" bodyend="459"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1aca85eef5976c0f0f2710e8dba6484322" compoundref="_spatial_structures_native_8cs" startline="215" endline="239">HumanFactors.SpatialStructures.NativeMethods.C_GetNodeAttributes</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a1a40fc2bab18a5adf42fb7a49ca6ddb9">HumanFactors.SpatialStructures.Graph.NumNodes</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a0ec380a14ed15e54db8f423a0af0c0d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.SpatialStructures.Graph.ClearNodeAttributes</definition>
        <argsstring>(string attribute)</argsstring>
        <name>ClearNodeAttributes</name>
        <param>
          <type>string</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
<para>Clear an attribute and all of its scores from the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique key of the attribute to clear from the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>graph<sp/>and<sp/>add<sp/>two<sp/>edges<sp/>to<sp/>create<sp/>nodes</highlight></codeline>
<codeline><highlight class="normal">Graph<sp/>g<sp/>=<sp/>new<sp/>Graph();</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>1,<sp/>150);</highlight></codeline>
<codeline><highlight class="normal">g.AddEdge(0,<sp/>2,<sp/>100);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>arrays<sp/>for<sp/>ids<sp/>and<sp/>scores</highlight></codeline>
<codeline><highlight class="normal">int[]<sp/>ids<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline><highlight class="normal">string[]<sp/>scores<sp/>=<sp/>{<sp/>&quot;0&quot;,<sp/>&quot;100&quot;,<sp/>&quot;200&quot;<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>them<sp/>to<sp/>the<sp/>graph</highlight></codeline>
<codeline><highlight class="normal">g.AddNodeAttribute(&quot;Attr&quot;,<sp/>ids,<sp/>scores);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Now<sp/>try<sp/>to<sp/>delete</highlight></codeline>
<codeline><highlight class="normal">g.ClearNodeAttributes(&quot;Attr&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>check<sp/>that<sp/>this<sp/>is<sp/>truly<sp/>gone</highlight></codeline>
<codeline><highlight class="normal">var<sp/>node_attrs<sp/>=<sp/>g.GetNodeAttributes(&quot;Attr&quot;);</highlight></codeline>
<codeline><highlight class="normal">Debug.WriteLine(node_attrs.size());</highlight></codeline>
</programlisting> <computeroutput>&gt;&gt;&gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="490" column="21" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="490" bodyend="493"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1a0eb7a8a8273141b1415a1f9fe95933b5">HumanFactors.SpatialStructures.NativeMethods.C_ClearAttributeType</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a1a40fc2bab18a5adf42fb7a49ca6ddb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HumanFactors.SpatialStructures.Graph.NumNodes</definition>
        <argsstring>()</argsstring>
        <name>NumNodes</name>
        <briefdescription>
<para>Get the number of nodes in this graph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of currently defined nodes in this graph</para>
</simplesect>
<simplesect kind="remark"><para>This is used multiple times internally to get the size of the graph without needing to get its nodes.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>graph<sp/>and<sp/>add<sp/>some<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref><sp/>g<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" kindref="member">Graph</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(0,<sp/>2,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.AddEdge(1,<sp/>2,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>the<sp/>graph<sp/>before<sp/>using<sp/>it<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.CompressToCSR();</highlight></codeline>
</programlisting><programlisting filename="spatialstructures\test_spatialstructures.cs"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>g</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_nodes<sp/>=<sp/>g.NumNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.WriteLine(number_of_nodes);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting><computeroutput>3</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="508" column="20"/>
        <referencedby refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a45a2d5b16092f8389210dc47f722a539" compoundref="_graph_8cs" startline="272" endline="281">HumanFactors.SpatialStructures.Graph.AggregateEdgeCosts</referencedby>
        <referencedby refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a3ede2597cc17a4f1a130741b0163bbab" compoundref="_shortest_path_8cs" startline="290" endline="310">HumanFactors.Pathfinding.ShortestPath.DijkstraAllToAll</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a4103f286b08f3a7df95d22349d9db7ab" compoundref="overall__examples_8cs" startline="230" endline="302">Humanfctors.Examples.OverallExamples.GenerateAllToAll</referencedby>
        <referencedby refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a78c22c3af8aea1a7b873a61fcc8aa935" compoundref="_graph_8cs" startline="456" endline="459">HumanFactors.SpatialStructures.Graph.GetNodeAttributes</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_human_factors_1_1_spatial_structures_1_1_graph_1a274f89b6ee5b5e22fe566e96de49461a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool HumanFactors.SpatialStructures.Graph.ReleaseHandle</definition>
        <argsstring>()</argsstring>
        <name>ReleaseHandle</name>
        <briefdescription>
<para>Free the native memory managed by this class. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the garbage collector will handle this automatically </para>
</simplesect>
<simplesect kind="warning"><para>Do not attempt to use this class after freeing it! </para>
</simplesect>
<simplesect kind="return"><para>True. This is guaranteed to execute properly. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="339" column="33" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="339" bodyend="343"/>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_native_methods_1a464f503116478fbb7eb9baeb2ef45aac">HumanFactors.SpatialStructures.NativeMethods.C_DestroyGraph</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A graph representing connections between points in space. </para>
    </briefdescription>
    <detaileddescription>
<para>Every <ref refid="struct_human_factors_1_1_spatial_structures_1_1_node" kindref="compound">Node</ref> in the graph contains an X,Y,Z coordinate which can be used to represent a specific point in space. This graph internally is stored as a Sparse Matrix for space efficency. Nodes are stored in a hashmap containing X,Y, and Z coordinates, allowing for quick indexing of specific nodes by location alone. Access to this graph&apos;s internal CSR is available through <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">Graph.CompressToCSR()</ref>.</para>
<para><simplesect kind="par"><title>Cost Types</title><para>This <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref> is capable of holding multiple cost types for any of it&apos;s edges. Each cost type has a distinct key as it&apos;s name, such as &quot;CrossSlope&quot; or &quot;EnergyExpenditure&quot;. Upon creation, the graph is assigned a default cost type, <computeroutput>Distance</computeroutput> which can be accessed explicitly by the key &quot;Distance&quot; or leaving the cost_type field blank. Alternate costs have corresponding edges in the default cost set, but different costs to traverse from the parent to the child node.</para>
</simplesect>
<simplesect kind="par"><title>NodeAttributes</title><para>The graph is able to store an arbitrary amount of information about the nodes it contains as strings. Similar to alternate cost types, node attributes are each have a distinct key as their name, but instead of conatining information about edges in the graph, node attributes contain information about nodes. Unlike the cost algorithms in edgecosts, right now there is no functionality within <ref refid="namespace_human_factors" kindref="compound">HumanFactors</ref> that populates the node attributes of the graph with any kind of metric, however the methods to add and clear node attributes are made available so you are free to add your own node attributes.</para>
</simplesect>
<simplesect kind="note"><para>To get the XYZ coordinates of a node from it&apos;s ID, use the ID as an index into the graph&apos;s nodes array returned by <ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a6b2aeaa562da06bec0d23aaabb2ba74d" kindref="member">getNodes()</ref>; For example, if you want to get the node with an ID of 1 from the graph, you&apos;d access the element at index 1 in the nodes array.</para>
</simplesect>
<simplesect kind="invariant"><para>1) The CSR maintained by this graph will always be valid. </para>
</simplesect>
<simplesect kind="invariant"><para>2) Every unique unique node in the graph will be assigned a unique id. A <ref refid="struct_human_factors_1_1_spatial_structures_1_1_node" kindref="compound">Node</ref> is considered unique if it has an X,Y,Z location that is not within 0.0001 units of any other node in the graph.</para>
</simplesect>
<simplesect kind="note"><para>The graph offers some basic functionality to add edges and nodes but it&apos;s main use is to provide access to the output of the <ref refid="namespace_human_factors_1_1_graph_generator" kindref="compound">GraphGenerator</ref> and <ref refid="namespace_human_factors_1_1_visibility_graph" kindref="compound">VisibilityGraph</ref>. If adding edges or alternate cost types please make sure to read the documentation for these functions and that all preconditions are followed.</para>
</simplesect>
</para>
<internal><para><xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>Functions to access edges in the graph like numpy. Users shouldn&apos;t have to use unsafe functions to get the edges of a node from the CSR. </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" kindref="member">CompressToCSR</ref> to get a CSR representation of the graph. </para>
</simplesect>
</para>
</internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>NativeObject</label>
        <link refid="class_human_factors_1_1_native_utils_1_1_native_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>HumanFactors.SpatialStructures.Graph</label>
        <link refid="class_human_factors_1_1_spatial_structures_1_1_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SafeHandle</label>
        <link refid="class_safe_handle"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>HumanFactors.SpatialStructures.CSRInfo</label>
        <link refid="struct_human_factors_1_1_spatial_structures_1_1_c_s_r_info"/>
        <childnode refid="5" relation="usage">
          <edgelabel>cols</edgelabel>
          <edgelabel>nnz</edgelabel>
          <edgelabel>rows</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>outer_indices</edgelabel>
          <edgelabel>data</edgelabel>
          <edgelabel>inner_indices</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>IntPtr</label>
      </node>
      <node id="2">
        <label>NativeObject</label>
        <link refid="class_human_factors_1_1_native_utils_1_1_native_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>IsInvalid</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>pressure</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>HumanFactors.SpatialStructures.Graph</label>
        <link refid="class_human_factors_1_1_spatial_structures_1_1_graph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>CSRPointers</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="3">
        <label>SafeHandle</label>
        <link refid="class_safe_handle"/>
      </node>
      <node id="4">
        <label>override bool</label>
      </node>
    </collaborationgraph>
    <location file="src/Csharp/packages/spatialstructures/src/Graph.cs" line="101" column="11" bodyfile="src/Csharp/packages/spatialstructures/src/Graph.cs" bodystart="102" bodyend="509"/>
    <listofallmembers>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a24d42bc60412118b8eab54d137cabf36" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>AddEdge</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1ad4effbecd5ea2998b87425bd52e33f58" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>AddEdge</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a4092cfc4260762e5b18127e3dbbe770e" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>AddNodeAttribute</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a4cf45189fef35fbd24aa74a9f51adafc" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>AddNodeAttribute</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a45a2d5b16092f8389210dc47f722a539" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>AggregateEdgeCosts</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a0ec380a14ed15e54db8f423a0af0c0d4" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>ClearNodeAttributes</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a84a7286932920179d90a63cfd8ada207" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>CompressToCSR</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a0e139b5c04daaa9e4bd3bf9cb3ee9722" prot="private" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>CSRPointers</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1abde89644defe692bffea19e3c3aebf8a" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>GetCost</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a78c22c3af8aea1a7b873a61fcc8aa935" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>GetNodeAttributes</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1abe9106fd9584269e1291702aa401f6ac" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>GetNodeID</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a6b2aeaa562da06bec0d23aaabb2ba74d" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>getNodes</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1aa613f3162fe49e35e155cd2418a0fa46" prot="package" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>Graph</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a01855a86f49d22301651cf7098ee8967" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>Graph</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a33340c37b83300ec09f6fc7982d2fb70" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>IsInvalid</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1ae7f34573598d48a9ef666b96895c7201" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>NativeObject</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a1a40fc2bab18a5adf42fb7a49ca6ddb9" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>NumNodes</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" prot="package" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>Pointer</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a46b2320d66a2b0405024db48f376b72c" prot="public" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>pressure</name></member>
      <member refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a274f89b6ee5b5e22fe566e96de49461a" prot="protected" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>ReleaseHandle</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a062ff788763ba2ad52a7c20000c8ecd8" prot="private" virt="non-virtual"><scope>HumanFactors::SpatialStructures::Graph</scope><name>~NativeObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="class_human_factors_1_1_geometry_1_1_mesh_info" kind="class" language="C#" prot="public">
    <compoundname>HumanFactors::Geometry::MeshInfo</compoundname>
    <basecompoundref refid="class_human_factors_1_1_native_utils_1_1_native_object" prot="public" virt="non-virtual">HumanFactors.NativeUtils.NativeObject</basecompoundref>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1ab5359e337ca952f01134eeef7a4c0cb9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int HumanFactors.Geometry.MeshInfo.CalculatePresure</definition>
        <argsstring>()</argsstring>
        <name>CalculatePresure</name>
        <briefdescription>
<para>Calculates the mesh&apos;s pressure. Unimplemented for now. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>Make a function in C++ to calculate the size of indices/vertices so the amount of pressure to exert on the GC can properly be calculated. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="55" column="20" bodyfile="src/Csharp/packages/geometry/src/MeshInfo.cs" bodystart="55" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1a9ed5e9129b511932a34c79ead954007e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool HumanFactors.Geometry.MeshInfo.ReleaseHandle</definition>
        <argsstring>()</argsstring>
        <name>ReleaseHandle</name>
        <briefdescription>
<para>Manually delete this mesh in Unmanaged memory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is called automatically when the class is garbage collected, so don&apos;t worry about needing to manually call this. It may be advantageous to deallocate large meshes at specific times for specialized purposes where the garbage collector deleting a large mesh will cause noticable lag.</para>
</simplesect>
<simplesect kind="return"><para>True if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</para>
</simplesect>
<simplesect kind="warning"><para>This deletes the mesh in unmanaged memory! Don&apos;t try to use this class again after calling this function! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="76" column="25" bodyfile="src/Csharp/packages/geometry/src/MeshInfo.cs" bodystart="76" bodyend="80"/>
        <references refid="class_human_factors_1_1_geometry_1_1_native_methods_1aef0d55401f54dc146560c34f7de8c5f6">HumanFactors.Geometry.NativeMethods.DestroyMeshInfo</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-func">
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1a7840f891fd3f7b38f64c5e1619ebc812" prot="package" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HumanFactors.Geometry.MeshInfo.MeshInfo</definition>
        <argsstring>(IntPtr pointer, int size=0)</argsstring>
        <name>MeshInfo</name>
        <param>
          <type>IntPtr</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a new meshinfo instance from the given pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an existing meshinfo instance in unmanaged memory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Just a call back to the base functionality of nativeobject.</para>
<para><simplesect kind="remark"><para>This shouldn&apos;t be called directly unless pointer is gauranteed to point to a valid mesh </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="92" column="18" bodyfile="src/Csharp/packages/geometry/src/MeshInfo.cs" bodystart="92" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1a3cbae27f830f86d6377332c295e04a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HumanFactors.Geometry.MeshInfo.MeshInfo</definition>
        <argsstring>(int[] indices, float[] vertices, string name=&quot;&quot;, int id=-1)</argsstring>
        <name>MeshInfo</name>
        <param>
          <type>int[]</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>float[]</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Create an instance of <ref refid="class_human_factors_1_1_geometry_1_1_mesh_info" kindref="compound">MeshInfo</ref> from an array of vertices and triangle indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of indices for the triangles in the mesh. Each integer should correspond to 3 values in <emphasis>vertices</emphasis> , and every 3 integers should represent a complete triangle for the mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertices of the mesh. Each 3 floats represent the X,Y, and Z of a point in space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the mesh. Unused for now. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for this mesh. If -1, this will automatically be set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="class_human_factors_1_1_exceptions_1_1_invalid_mesh_exception" kindref="compound">HumanFactors.Exceptions.InvalidMeshException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input indices and vertices result in an invalid mesh. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="111" column="16" bodyfile="src/Csharp/packages/geometry/src/MeshInfo.cs" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1a3f9bd73c9c82e777bb083439d457b8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.Geometry.MeshInfo.RotateMesh</definition>
        <argsstring>(float xrot, float yrot, float zrot)</argsstring>
        <name>RotateMesh</name>
        <param>
          <type>float</type>
          <declname>xrot</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yrot</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zrot</declname>
        </param>
        <briefdescription>
<para>Rotate this mesh by the desired magnitude. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xrot</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch to rotate by in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yrot</parametername>
</parameternamelist>
<parameterdescription>
<para>Yaw to rotate by in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zrot</parametername>
</parameternamelist>
<parameterdescription>
<para>Roll to rotate by in degrees.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>See the other overload for this function for use with <ref refid="class_human_factors_1_1_geometry_1_1_common_rotations" kindref="compound">CommonRotations</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="126" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_geometry_1_1_mesh_info_1a62f20076e25f8f2c23c9ca473a98ed9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HumanFactors.Geometry.MeshInfo.RotateMesh</definition>
        <argsstring>(Vector3D rotation)</argsstring>
        <name>RotateMesh</name>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
<para>Rotate this mesh by the desired magnitude. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>How far to rotate the mesh on the X,Y, and Z, axises in degrees.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_geometry_1_1_common_rotations" kindref="compound">CommonRotations</ref> for commonly used rotations such as Yup to Zup. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="135" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of vertices and indices representing geometry. </para>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="https://upload.wikimedia.org/wikipedia/commons/2/2d/Mesh_fv.jpg">Figure 1.1: Meshinfo Internals</image>
</para>
<para>Stores a reference to mesh geometry in native memory. Internally, meshes are represented as a 3 by X matrix of vertices and a 3 by X matrix for indices. In the above image, the face list and vertex list are what&apos;s held in <ref refid="class_human_factors_1_1_geometry_1_1_mesh_info" kindref="compound">MeshInfo</ref>&apos;s Index and Vertex arrays respectively.</para>
<para><simplesect kind="invariant"><para>Will always hold a valid mesh.</para>
</simplesect>
</para>
<internal><para><simplesect kind="remark"><para>Eigen is used to manage all matricies and perform quick transformations such as RotateMesh. More details on Eigen are available here: <ulink url="https://eigen.tuxfamily.org/dox/group__Geometry__Module.html">https://eigen.tuxfamily.org/dox/group__Geometry__Module.html</ulink></para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Support getting the name of a mesh from the OBJ. </para>
<para>Support transforming by a matrix. </para>
</xrefdescription></xrefsect></para>
</internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>HumanFactors.Geometry.MeshInfo</label>
        <link refid="class_human_factors_1_1_geometry_1_1_mesh_info"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SafeHandle</label>
        <link refid="class_safe_handle"/>
      </node>
      <node id="2">
        <label>NativeUtils::NativeObject</label>
        <link refid="class_human_factors_1_1_native_utils_1_1_native_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>HumanFactors.Geometry.MeshInfo</label>
        <link refid="class_human_factors_1_1_geometry_1_1_mesh_info"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="3">
        <label>SafeHandle</label>
        <link refid="class_safe_handle"/>
      </node>
      <node id="4">
        <label>override bool</label>
      </node>
      <node id="2">
        <label>NativeUtils::NativeObject</label>
        <link refid="class_human_factors_1_1_native_utils_1_1_native_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>IsInvalid</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>pressure</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/Csharp/packages/geometry/src/MeshInfo.cs" line="46" column="11" bodyfile="src/Csharp/packages/geometry/src/MeshInfo.cs" bodystart="47" bodyend="136"/>
    <listofallmembers>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1ab5359e337ca952f01134eeef7a4c0cb9" prot="private" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>CalculatePresure</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a33340c37b83300ec09f6fc7982d2fb70" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>IsInvalid</name></member>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1a7840f891fd3f7b38f64c5e1619ebc812" prot="package" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>MeshInfo</name></member>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1a3cbae27f830f86d6377332c295e04a53" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>MeshInfo</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1ae7f34573598d48a9ef666b96895c7201" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>NativeObject</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" prot="package" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>Pointer</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a46b2320d66a2b0405024db48f376b72c" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>pressure</name></member>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1a9ed5e9129b511932a34c79ead954007e" prot="protected" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>ReleaseHandle</name></member>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1a3f9bd73c9c82e777bb083439d457b8ad" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>RotateMesh</name></member>
      <member refid="class_human_factors_1_1_geometry_1_1_mesh_info_1a62f20076e25f8f2c23c9ca473a98ed9d" prot="public" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>RotateMesh</name></member>
      <member refid="class_human_factors_1_1_native_utils_1_1_native_object_1a062ff788763ba2ad52a7c20000c8ecd8" prot="private" virt="non-virtual"><scope>HumanFactors::Geometry::MeshInfo</scope><name>~NativeObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="class_human_factors_1_1_pathfinding_1_1_shortest_path" kind="class" language="C#" prot="public">
    <compoundname>HumanFactors::Pathfinding::ShortestPath</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_human_factors_1_1_pathfinding_1_1_shortest_path_1adc3fbf31af391a4ce9efd911c0c74fee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_pathfinding_1_1_path" kindref="compound">Path</ref></type>
        <definition>static Path HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPath</definition>
        <argsstring>(Graph graph, int start_id, int end_id, string cost_type=&quot;&quot;)</argsstring>
        <name>DijkstraShortestPath</name>
        <param>
          <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Perform Dijkstra&apos;s shortest path algorithm to find a path between two nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to conduct the search on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the node to start at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the node to find a path to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to use for generating the path. If left blank, will use the cost that the graph was created with. In the case of the graph generator, the default cost is distance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shortest path from start_node to end_node or null if no path could be found.</para>
</simplesect>
<simplesect kind="pre"><para>1) <computeroutput>start_id</computeroutput> and <computeroutput>end_id</computeroutput> must be the X,Y,Z position of nodes that already exist in <computeroutput>graph</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>2) If <computeroutput>cost_type</computeroutput> is not left as the default, then it must be the name of a valid cost already defined in <computeroutput>graph</computeroutput>.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> wasn&apos;t left as blank, and didn&apos;t refer to the name of any cost that already exists in the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1ab7f58f298125194e33d6c69ed4797442" kindref="member">DijkstraShortestPathMulti</ref> for efficently generating multiple paths in parallel.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting><codeline><highlight class="normal">[(1,<sp/>1.415028),<sp/>(12,<sp/>1.417536),<sp/>(26,<sp/>1.417887),<sp/>(39,<sp/>1.418485),<sp/>(50,<sp/>1.000265),<sp/>(63,<sp/>1.000128),<sp/>(80,<sp/>1.000098),<sp/>(105,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">[(1,<sp/>4.559175),<sp/>(12,<sp/>5.759251),<sp/>(26,<sp/>5.889585),<sp/>(39,<sp/>6.100943),<sp/>(50,<sp/>2.978094),<sp/>(63,<sp/>2.826927),<sp/>(80,<sp/>2.784634),<sp/>(105,<sp/>0)]</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="74" column="28" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="74" bodyend="81"/>
        <references refid="class_human_factors_1_1_pathfinding_1_1_native_methods_1a000ba4e4cf47dc3eff4c6ecbd61354ab" compoundref="_pathfinding_native_8cs" startline="27" endline="60">HumanFactors.Pathfinding.NativeMethods.C_CreatePath</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
        <references refid="struct_human_factors_1_1_native_utils_1_1_c_vector_and_data_1a8bcdb7b4516a15f5b905ebcd33a55e6c" compoundref="_native_utils_8cs" startline="38">HumanFactors.NativeUtils.CVectorAndData.size</references>
        <referencedby refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a394c96543ad621b2e5d98554153d74b4" compoundref="_shortest_path_8cs" startline="117" endline="123">HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPath</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a6421033cc6aa5da057d70d7b82d16dc1" compoundref="overall__examples_8cs" startline="71" endline="125">Humanfctors.Examples.OverallExamples.GeneratePathsWithCostAlgorithms</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a394c96543ad621b2e5d98554153d74b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_pathfinding_1_1_path" kindref="compound">Path</ref></type>
        <definition>static Path HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPath</definition>
        <argsstring>(Graph graph, Vector3D start_node, Vector3D end_node, string cost_type=&quot;&quot;)</argsstring>
        <name>DijkstraShortestPath</name>
        <param>
          <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>start_node</declname>
        </param>
        <param>
          <type><ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref></type>
          <declname>end_node</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Perform Dijkstra&apos;s shortest path algorithm to find a path between two nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to conduct the search on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_node</parametername>
</parameternamelist>
<parameterdescription>
<para>The X,Y,Z of a node in the graph node to start at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_node</parametername>
</parameternamelist>
<parameterdescription>
<para>The X,Y,Z of a node in the graph node to end at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to use for generating the path. If left blank, will use the cost that the graph was created with. In the case of the graph generator, the default cost is distance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shortest path from start_node to end_node or null if no path could be found.</para>
</simplesect>
<simplesect kind="pre"><para>1) <computeroutput>start_node</computeroutput> and <computeroutput>end_node</computeroutput> must be the X,Y,Z position of nodes that already exist in <computeroutput>graph</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>2) If <computeroutput>cost_type</computeroutput> is not left as the default, then it must be the name of a valid cost already defined in <computeroutput>graph</computeroutput>.</para>
</simplesect>
<simplesect kind="remark"><para>Gets the start id and end of both nodes, then calls the ID overload.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> wasn&apos;t left as blank, and didn&apos;t refer to the name of any cost that already exists in the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1ab7f58f298125194e33d6c69ed4797442" kindref="member">DijkstraShortestPathMulti</ref> for efficently generating multiple paths in parallel.</para>
</simplesect>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting><codeline><highlight class="normal">[(1,<sp/>1.415028),<sp/>(12,<sp/>1.417536),<sp/>(26,<sp/>1.417887),<sp/>(39,<sp/>1.418485),<sp/>(50,<sp/>1.000265),<sp/>(63,<sp/>1.000128),<sp/>(80,<sp/>1.000098),<sp/>(105,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">[(1,<sp/>4.559175),<sp/>(12,<sp/>5.759251),<sp/>(26,<sp/>5.889585),<sp/>(39,<sp/>6.100943),<sp/>(50,<sp/>2.978094),<sp/>(63,<sp/>2.826927),<sp/>(80,<sp/>2.784634),<sp/>(105,<sp/>0)]</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="117" column="28" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="117" bodyend="123"/>
        <references refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1adc3fbf31af391a4ce9efd911c0c74fee" compoundref="_shortest_path_8cs" startline="74" endline="81">HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPath</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1abe9106fd9584269e1291702aa401f6ac">HumanFactors.SpatialStructures.Graph.GetNodeID</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_pathfinding_1_1_shortest_path_1ab7f58f298125194e33d6c69ed4797442" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_pathfinding_1_1_path" kindref="compound">Path</ref>[]</type>
        <definition>static Path [] HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPathMulti</definition>
        <argsstring>(Graph graph, int[] start_ids, int[] end_ids, string cost_type=&quot;&quot;)</argsstring>
        <name>DijkstraShortestPathMulti</name>
        <param>
          <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int[]</type>
          <declname>start_ids</declname>
        </param>
        <param>
          <type>int[]</type>
          <declname>end_ids</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Find the shortest paths between each pair of start_id and end_id in order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to generate paths in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Ids for the start points to generate paths from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Ids for the end points to generate paths to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to use for generating the path. If left blank, will use the cost that the graph was created with. In the case of the graph generator, the default cost is distance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of paths in order from start_ids to end_ids. If a path could not be generated by a set of points, then the path at that location will be null.</para>
</simplesect>
<simplesect kind="pre"><para>1) The length of start_ids must match the length of end_ids. </para>
</simplesect>
<simplesect kind="pre"><para>2) Every ID in <computeroutput>start_ids</computeroutput> and <computeroutput>end_ids</computeroutput> must be the ID of some node in <computeroutput>graph</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>3) If <computeroutput>cost_type</computeroutput> is not left as the default, then it must be the name of a valid cost already defined in <computeroutput>graph</computeroutput>.</para>
</simplesect>
Uses all available cores for parallel calculation.</para>
<para><simplesect kind="pre"><para>The length of start_ids must match the length of end_ids.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System.ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of start_ids didn&apos;t equal length of end_ids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> wasn&apos;t left as blank, and didn&apos;t refer to the name of any cost that already exists in the graph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting><codeline><highlight class="normal">1<sp/>to<sp/>101<sp/>Energy<sp/><sp/>:<sp/>[(1,<sp/>2.461),<sp/>(11,<sp/>2.5),<sp/>(24,<sp/>2.5),<sp/>(36,<sp/>4.491),<sp/>(47,<sp/>5.402),<sp/>(60,<sp/>5.302),<sp/>(77,<sp/>5.129),<sp/>(101,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">1<sp/>to<sp/>101<sp/>Distance:<sp/>[(1,<sp/>1),<sp/>(11,<sp/>1),<sp/>(24,<sp/>1),<sp/>(36,<sp/>1.415),<sp/>(47,<sp/>1.417),<sp/>(60,<sp/>1.416),<sp/>(77,<sp/>1.416),<sp/>(101,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">2<sp/>to<sp/>102<sp/>Energy<sp/><sp/>:<sp/>[(2,<sp/>2.5),<sp/>(1,<sp/>2.461),<sp/>(11,<sp/>2.5),<sp/>(24,<sp/>4.536),<sp/>(37,<sp/>5.528),<sp/>(48,<sp/>5.452),<sp/>(61,<sp/>5.605),<sp/>(78,<sp/>5.837),<sp/>(102,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">2<sp/>to<sp/>102<sp/>Distance:<sp/>[(2,<sp/>1),<sp/>(1,<sp/>1),<sp/>(11,<sp/>1),<sp/>(24,<sp/>1.415),<sp/>(37,<sp/>1.417),<sp/>(48,<sp/>1.417),<sp/>(61,<sp/>1.417),<sp/>(78,<sp/>1.418),<sp/>(102,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">3<sp/>to<sp/>103<sp/>Energy<sp/><sp/>:<sp/>[(3,<sp/>2.52),<sp/>(2,<sp/>2.5),<sp/>(1,<sp/>4.559),<sp/>(12,<sp/>2.48),<sp/>(25,<sp/>5.708),<sp/>(38,<sp/>5.656),<sp/>(49,<sp/>5.916),<sp/>(62,<sp/>6.644),<sp/>(79,<sp/>5.08),<sp/>(103,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">3<sp/>to<sp/>103<sp/>Distance:<sp/>[(3,<sp/>1),<sp/>(2,<sp/>1),<sp/>(1,<sp/>1.415),<sp/>(12,<sp/>1),<sp/>(25,<sp/>1.417),<sp/>(38,<sp/>1.417),<sp/>(49,<sp/>1.418),<sp/>(62,<sp/>1.42),<sp/>(79,<sp/>1.416),<sp/>(103,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">4<sp/>to<sp/>104<sp/>Energy<sp/><sp/>:<sp/>[(4,<sp/>2.48),<sp/>(12,<sp/>5.759),<sp/>(26,<sp/>5.89),<sp/>(39,<sp/>6.101),<sp/>(50,<sp/>7.008),<sp/>(64,<sp/>5.863),<sp/>(83,<sp/>3.827),<sp/>(104,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">4<sp/>to<sp/>104<sp/>Distance:<sp/>[(4,<sp/>1),<sp/>(12,<sp/>1.418),<sp/>(26,<sp/>1.418),<sp/>(39,<sp/>1.418),<sp/>(50,<sp/>1.421),<sp/>(64,<sp/>1.418),<sp/>(83,<sp/>1.002),<sp/>(104,<sp/>0)]</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="167" column="28" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="167" bodyend="187"/>
        <references refid="class_human_factors_1_1_pathfinding_1_1_native_methods_1a1b79d24699fd670918524395024e9777" compoundref="_pathfinding_native_8cs" startline="67" endline="114">HumanFactors.Pathfinding.NativeMethods.C_CreatePaths</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1aca2691944e85bed386f4cbf68354b8b1" compoundref="overall__examples_8cs" startline="128" endline="169">Humanfctors.Examples.OverallExamples.DijkstraShortestPathMulti</referencedby>
        <referencedby refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a9fb6fc6aff938136f7f9de42e5d8e5bc" compoundref="_shortest_path_8cs" startline="229" endline="251">HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPathMulti</referencedby>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a3eb31ff06d9be8956d9e34a45276f29a" compoundref="overall__examples_8cs" startline="172" endline="227">Humanfctors.Examples.OverallExamples.DijkstraShortestPathMultiNodes</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a9fb6fc6aff938136f7f9de42e5d8e5bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_pathfinding_1_1_path" kindref="compound">Path</ref>[]</type>
        <definition>static Path [] HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPathMulti</definition>
        <argsstring>(Graph graph, IEnumerable&lt; Vector3D &gt; start_nodes, IEnumerable&lt; Vector3D &gt; end_nodes, string cost_type=&quot;&quot;)</argsstring>
        <name>DijkstraShortestPathMulti</name>
        <param>
          <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type>IEnumerable&lt; <ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref> &gt;</type>
          <declname>start_nodes</declname>
        </param>
        <param>
          <type>IEnumerable&lt; <ref refid="struct_human_factors_1_1_vector3_d" kindref="compound">Vector3D</ref> &gt;</type>
          <declname>end_nodes</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Find the shortest paths between each pair of start_id and end_id in order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to generate paths in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Locations of the start points to generate paths from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Locations of the end nodes to generate paths to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of cost to use for generating the path. If left blank, will use the cost that the graph was created with. In the case of the graph generator, the default cost is distance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of paths in order from <computeroutput>start_ids</computeroutput> to <computeroutput>end_ids</computeroutput>. If a path could not be generated by a set of points, then the path at that location will be null.</para>
</simplesect>
Determines the IDs of nodes, then calls the other overload. Uses all available cores for parallel calculation.</para>
<para><simplesect kind="pre"><para>1) The length of <computeroutput>start_ids</computeroutput> must match the length of <computeroutput>end_ids</computeroutput>. </para>
</simplesect>
<simplesect kind="pre"><para>2) Each node in <computeroutput>start_nodes</computeroutput> and end_nodes must contain the x,y,z position of an existing node in <computeroutput>graph</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>3) If <computeroutput>cost_type</computeroutput> is not left as the default, then it must be the name of a valid cost already defined in <computeroutput>graph</computeroutput>.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System.ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>start_ids</computeroutput> didn&apos;t equal length of <computeroutput>end_ids</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> wasn&apos;t left as blank, and didn&apos;t refer to the name of any cost that already exists in <computeroutput>graph</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting><codeline><highlight class="normal">(-30,<sp/>0,<sp/>1.068)<sp/>to<sp/>(-27,<sp/>-8,<sp/>1.295)<sp/>Energy<sp/><sp/>:<sp/>[(0,<sp/>2.48),<sp/>(4,<sp/>2.48),<sp/>(12,<sp/>2.48),<sp/>(25,<sp/>2.461),<sp/>(37,<sp/>2.461),<sp/>(47,<sp/>5.402),<sp/>(60,<sp/>5.302),<sp/>(77,<sp/>5.129),<sp/>(101,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-30,<sp/>0,<sp/>1.068)<sp/>to<sp/>(-27,<sp/>-8,<sp/>1.295)<sp/>Distance:<sp/>[(0,<sp/>1),<sp/>(4,<sp/>1),<sp/>(12,<sp/>1),<sp/>(25,<sp/>1),<sp/>(37,<sp/>1),<sp/>(47,<sp/>1.417),<sp/>(60,<sp/>1.416),<sp/>(77,<sp/>1.416),<sp/>(101,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>-1,<sp/>1.018)<sp/>to<sp/>(-26,<sp/>-8,<sp/>1.427)<sp/>Energy<sp/><sp/>:<sp/>[(1,<sp/>2.461),<sp/>(11,<sp/>2.5),<sp/>(24,<sp/>4.536),<sp/>(37,<sp/>5.528),<sp/>(48,<sp/>5.452),<sp/>(61,<sp/>5.605),<sp/>(78,<sp/>5.837),<sp/>(102,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>-1,<sp/>1.018)<sp/>to<sp/>(-26,<sp/>-8,<sp/>1.427)<sp/>Distance:<sp/>[(1,<sp/>1),<sp/>(11,<sp/>1),<sp/>(24,<sp/>1.415),<sp/>(37,<sp/>1.417),<sp/>(48,<sp/>1.417),<sp/>(61,<sp/>1.417),<sp/>(78,<sp/>1.418),<sp/>(102,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>0,<sp/>1.018)<sp/>to<sp/>(-25,<sp/>-8,<sp/>1.556)<sp/>Energy<sp/><sp/>:<sp/>[(2,<sp/>2.5),<sp/>(1,<sp/>4.559),<sp/>(12,<sp/>2.48),<sp/>(25,<sp/>5.708),<sp/>(38,<sp/>5.656),<sp/>(49,<sp/>5.916),<sp/>(62,<sp/>6.644),<sp/>(79,<sp/>5.08),<sp/>(103,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>0,<sp/>1.018)<sp/>to<sp/>(-25,<sp/>-8,<sp/>1.556)<sp/>Distance:<sp/>[(2,<sp/>1),<sp/>(1,<sp/>1.415),<sp/>(12,<sp/>1),<sp/>(25,<sp/>1.417),<sp/>(38,<sp/>1.417),<sp/>(49,<sp/>1.418),<sp/>(62,<sp/>1.42),<sp/>(79,<sp/>1.416),<sp/>(103,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>1,<sp/>1.017)<sp/>to<sp/>(-25,<sp/>-6,<sp/>1.678)<sp/>Energy<sp/><sp/>:<sp/>[(3,<sp/>2.52),<sp/>(2,<sp/>2.5),<sp/>(1,<sp/>4.559),<sp/>(12,<sp/>5.759),<sp/>(26,<sp/>5.89),<sp/>(39,<sp/>6.101),<sp/>(50,<sp/>7.008),<sp/>(64,<sp/>5.863),<sp/>(83,<sp/>3.827),<sp/>(104,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">(-31,<sp/>1,<sp/>1.017)<sp/>to<sp/>(-25,<sp/>-6,<sp/>1.678)<sp/>Distance:<sp/>[(3,<sp/>1),<sp/>(2,<sp/>1),<sp/>(1,<sp/>1.415),<sp/>(12,<sp/>1.418),<sp/>(26,<sp/>1.418),<sp/>(39,<sp/>1.418),<sp/>(50,<sp/>1.421),<sp/>(64,<sp/>1.418),<sp/>(83,<sp/>1.002),<sp/>(104,<sp/>0)]</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="229" column="28" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="229" bodyend="251"/>
        <references refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1ab7f58f298125194e33d6c69ed4797442" compoundref="_shortest_path_8cs" startline="167" endline="187">HumanFactors.Pathfinding.ShortestPath.DijkstraShortestPathMulti</references>
      </memberdef>
      <memberdef kind="function" id="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a3ede2597cc17a4f1a130741b0163bbab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_human_factors_1_1_pathfinding_1_1_path" kindref="compound">Path</ref>[]</type>
        <definition>static Path [] HumanFactors.Pathfinding.ShortestPath.DijkstraAllToAll</definition>
        <argsstring>(Graph g, string cost_type=&quot;&quot;)</argsstring>
        <name>DijkstraAllToAll</name>
        <param>
          <type><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">Graph</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cost_type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Generate a path from every node in the graph to every other node in a graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The graph to generate paths in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cost_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of cost to use for path generation. If left blank will use the default cost of the graph</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of paths with a length equal to the number of nodes in <computeroutput>g</computeroutput> squared. Paths will be returned in order starting with all paths from node 0, then all paths from node 1, etc. If a path could not be generated between a set of nodes, then path at that index will be null.</para>
</simplesect>
<simplesect kind="pre"><para>If <computeroutput>cost_type</computeroutput> is not left as the default, then it must be the name of a valid cost already defined in <computeroutput>graph</computeroutput>.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>KeyNotFoundException</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>cost_type</computeroutput> wasn&apos;t left as blank, and didn&apos;t refer to the name of any cost that already exists in <computeroutput>graph</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para><programlisting filename="spatialstructures\examples_spatialstructures.cs"></programlisting> <programlisting><codeline><highlight class="normal">0<sp/>-&gt;<sp/>1<sp/>:<sp/>[(0,<sp/>10),<sp/>(1,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">0<sp/>-&gt;<sp/>2<sp/>:<sp/>[(0,<sp/>10),<sp/>(1,<sp/>15),<sp/>(2,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">0<sp/>-&gt;<sp/>3<sp/>:<sp/>[(0,<sp/>30),<sp/>(3,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">1<sp/>-&gt;<sp/>0<sp/>:<sp/>[None]</highlight></codeline>
<codeline><highlight class="normal">1<sp/>-&gt;<sp/>2<sp/>:<sp/>[(1,<sp/>15),<sp/>(2,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">1<sp/>-&gt;<sp/>3<sp/>:<sp/>[(1,<sp/>15),<sp/>(2,<sp/>5),<sp/>(3,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">2<sp/>-&gt;<sp/>0<sp/>:<sp/>[None]</highlight></codeline>
<codeline><highlight class="normal">2<sp/>-&gt;<sp/>1<sp/>:<sp/>[(2,<sp/>5),<sp/>(3,<sp/>15),<sp/>(1,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">2<sp/>-&gt;<sp/>3<sp/>:<sp/>[(2,<sp/>5),<sp/>(3,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">3<sp/>-&gt;<sp/>0<sp/>:<sp/>[None]</highlight></codeline>
<codeline><highlight class="normal">3<sp/>-&gt;<sp/>1<sp/>:<sp/>[(3,<sp/>15),<sp/>(1,<sp/>0)]</highlight></codeline>
<codeline><highlight class="normal">3<sp/>-&gt;<sp/>2<sp/>:<sp/>[(3,<sp/>15),<sp/>(1,<sp/>15),<sp/>(2,<sp/>0)]</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="290" column="28" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="290" bodyend="310"/>
        <references refid="class_human_factors_1_1_pathfinding_1_1_native_methods_1aacec0c6d617c78c505944142d6bd4c4b" compoundref="_pathfinding_native_8cs" startline="115" endline="158">HumanFactors.Pathfinding.NativeMethods.C_AllToAllPaths</references>
        <references refid="class_human_factors_1_1_spatial_structures_1_1_graph_1a1a40fc2bab18a5adf42fb7a49ca6ddb9">HumanFactors.SpatialStructures.Graph.NumNodes</references>
        <references refid="class_human_factors_1_1_native_utils_1_1_native_object_1aa58c089e79cb4acc260755a41952d3d6" compoundref="_pointer_holder_8cs" startline="49" endline="49">HumanFactors.NativeUtils.NativeObject.Pointer</references>
        <referencedby refid="class_humanfctors_1_1_examples_1_1_overall_examples_1a4103f286b08f3a7df95d22349d9db7ab" compoundref="overall__examples_8cs" startline="230" endline="302">Humanfctors.Examples.OverallExamples.GenerateAllToAll</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions for finding the shortest path between two nodes in a graph. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="remark"><para>The shortest path functions will use Dijkstra&apos;s algorithm to find the shortest path between one or more nodes in a Graph. Since the graph can hold multiple costs for each contained edge, the type of cost used in this calculation can be specified for each function. This allows for paths to be generated using costs generated by the CostAlgorithms in <ref refid="namespace_human_factors_1_1_spatial_structures" kindref="compound">SpatialStructures</ref> such as cross slope, or energy expenditure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_pathfinding_1_1_shortest_path" kindref="compound">ShortestPath</ref> for generating a single path between two nodes. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1adc3fbf31af391a4ce9efd911c0c74fee" kindref="member">DijkstraShortestPath</ref> for generating multiple paths at once. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_human_factors_1_1_spatial_structures_1_1_graph" kindref="compound">SpatialStructures.Graph</ref> for more information on how it stores multiple costs. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/Csharp/packages/pathfinding/src/ShortestPath.cs" line="40" column="19" bodyfile="src/Csharp/packages/pathfinding/src/ShortestPath.cs" bodystart="40" bodyend="311"/>
    <listofallmembers>
      <member refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a3ede2597cc17a4f1a130741b0163bbab" prot="public" virt="non-virtual"><scope>HumanFactors::Pathfinding::ShortestPath</scope><name>DijkstraAllToAll</name></member>
      <member refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1adc3fbf31af391a4ce9efd911c0c74fee" prot="public" virt="non-virtual"><scope>HumanFactors::Pathfinding::ShortestPath</scope><name>DijkstraShortestPath</name></member>
      <member refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a394c96543ad621b2e5d98554153d74b4" prot="public" virt="non-virtual"><scope>HumanFactors::Pathfinding::ShortestPath</scope><name>DijkstraShortestPath</name></member>
      <member refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1ab7f58f298125194e33d6c69ed4797442" prot="public" virt="non-virtual"><scope>HumanFactors::Pathfinding::ShortestPath</scope><name>DijkstraShortestPathMulti</name></member>
      <member refid="class_human_factors_1_1_pathfinding_1_1_shortest_path_1a9fb6fc6aff938136f7f9de42e5d8e5bc" prot="public" virt="non-virtual"><scope>HumanFactors::Pathfinding::ShortestPath</scope><name>DijkstraShortestPathMulti</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

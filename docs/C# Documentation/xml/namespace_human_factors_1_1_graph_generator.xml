<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespace_human_factors_1_1_graph_generator" kind="namespace" language="C#">
    <compoundname>HumanFactors::GraphGenerator</compoundname>
    <innerclass refid="class_human_factors_1_1_graph_generator_1_1_graph_generator" prot="public">HumanFactors::GraphGenerator::GraphGenerator</innerclass>
    <innerclass refid="class_human_factors_1_1_graph_generator_1_1_native_methods" prot="package">HumanFactors::GraphGenerator::NativeMethods</innerclass>
    <briefdescription>
<para>Generate a graph of accessible space from a given start point. </para>
    </briefdescription>
    <detaileddescription>
<para>The Graph Generator maps out &quot;accessible&quot; space on a model from a given starting point. In graphs created by this algorithm, node represents a point in space that a human can occupy, and each edge between nodes indicates that a human can traverse from one node to another node. The Graph Generator is a powerful tool for analyzing space, since the graph or nodes it outputs can be used as input to all the analysis methods offered by <ref refid="namespace_human_factors" kindref="compound">HumanFactors</ref>, allowing for it to be the starting point of other analysis methods within <ref refid="namespace_human_factors" kindref="compound">HumanFactors</ref>.</para>
<para><simplesect kind="note"><para>All arguments are in meters for distances and degrees for angles unless otherwise specified. For all calculations, the Graph Generator assumes geometry is Z-Up i.e. upstep is how high the step is in the z-direction, ground checks are performed in the -z direction etc. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/Csharp/packages/graphgenerator/src/GraphGenerator.cs" line="23" column="1"/>
  </compounddef>
</doxygen>
